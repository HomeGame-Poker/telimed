{"version":3,"sources":["Shared.js","LocalTracks.js","LocalSpeaker.js","RemoteTrack.js","App.js","index.js"],"names":["componentGetCompareProps","path","current","previous","defaultValue","transfrom","cur","_","get","pre","isFunction","Current","Previous","HasChanged","LocalTracks","props","onTrackStoppedEvent","event","console","log","onTrackAudioOutputChangedEvent","deviceId","updateLocalTrack","action","clearTrack","find","trackList","getType","micRef","detach","removeEventListener","window","JitsiMeetJS","events","track","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","dispose","videoRef","setTrack","t","attach","addEventListener","unmute","onCameraChange","setState","selectedVideoDeviceId","target","value","onMicrophoneChange","selectedMicDeviceId","state","loaded","React","createRef","this","deviceList","defaultMicId","defaultVideoId","activeRoomId","createLocalTracks","devices","then","tracks","deviceIds","map","nd","id","indexOf","push","telimed","activeRoom","videoTrack","micTrack","addTrack","prevProps","prevState","class","onChange","concat","name","type","filter","d","autoPlay","ref","muted","Component","LocalSpeaker","onSpeakerChanged","speakerList","newSpeakerId","selectedSpeakerDeviceId","defaultSpeakerId","firstSpeaker","Fragment","s","RemoteTrack","updateTrack","selectedVideoId","selectedMicId","trackIds","remoteTracks","rt","newState","setAudioOutput","ct","join","pt","participantId","first","tid","oldVideoTrack","oldMicTrack","error","message","App","newSpeaker","onServerChanged","serverURL","onRoomChanged","roomId","onRoomTrackAdded","isLocal","newTrackId","getId","trackInfo","getParticipantId","remoteTrackIds","onRoomTrackRemoved","trackId","reject","onConnectionSuccess","activeConnection","initJitsiConference","openBridgeChannel","conference","TRACK_ADDED","TRACK_REMOVED","status","lastError","uuidv4","onConnectionFailed","a","b","c","onConnectionDisconnect","connection","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_DISCONNECTED","onConnect","JitsiConnection","hosts","domain","muc","serviceUrl","clientNode","connect","onDisconnect","leave","disconnect","renderRemoteTracks","trackGroups","ret","participantIds","keys","length","key","className","mediaDevices","enumerateDevices","newDeviceList","device","label","kind","micId","videoId","speakerId","remoteTrackGroups","groupBy","readOnly","onClick","disabled","init","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8548e53.chunk.js","sourcesContent":["import _ from 'lodash'\r\n\r\nexport const componentGetCompareProps = (path, current, previous, defaultValue, transfrom) => {\r\n    let cur = _.get(current, path, defaultValue)\r\n    let pre = _.get(previous, path, defaultValue)\r\n  \r\n    if (_.isFunction(transfrom)) {\r\n      cur = transfrom(_, cur)\r\n      pre = transfrom(_, pre)\r\n    }\r\n  \r\n    return {\r\n      Current: cur,\r\n      Previous: pre,\r\n      HasChanged: cur !== pre\r\n    }\r\n  }","import React from 'react';\r\nimport _ from 'lodash'\r\nimport { componentGetCompareProps } from './Shared'\r\nimport './LocalTracks.css'\r\n\r\nexport class LocalTracks extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            selectedMicDeviceId: 'none',\r\n            selectedVideoDeviceId: 'none',\r\n            loaded: false\r\n        }\r\n        this.videoRef = React.createRef()\r\n        this.micRef = React.createRef()\r\n        this.trackList = []\r\n    }\r\n\r\n    componentDidMount () {\r\n        const { deviceList = [], defaultMicId, defaultVideoId, activeRoomId } = this.props\r\n\r\n        window.JitsiMeetJS.createLocalTracks({ devices: ['audio', 'video']})\r\n        .then((tracks) => {\r\n            let deviceIds = _.map(deviceList, (nd) => nd.id)\r\n            for (let track of tracks) {\r\n                if (_.indexOf(deviceIds, track.deviceId) !== -1) {\r\n                    this.trackList.push(track)\r\n                }\r\n            }\r\n            this.setState({\r\n                loaded: true,\r\n                deviceList: deviceList,\r\n                selectedMicDeviceId: defaultMicId,\r\n                selectedVideoDeviceId: defaultVideoId,\r\n            }, () => {\r\n                this.updateLocalTrack(defaultMicId, 'set')\r\n                this.updateLocalTrack(defaultVideoId, 'set')\r\n\r\n                if (activeRoomId && window.telimed.activeRoom) {\r\n                    let videoTrack = _.find(this.trackList, (t) => { return t.deviceId === defaultVideoId })\r\n                    let micTrack = _.find(this.trackList, (t) => { return t.deviceId === defaultMicId })   \r\n                    if (videoTrack) {\r\n                        window.telimed.activeRoom.addTrack(videoTrack)\r\n                    }\r\n                    if (micTrack) {\r\n                        window.telimed.activeRoom.addTrack(micTrack)\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    onTrackStoppedEvent = (event) => {\r\n        console.log(`Track Stopped`)\r\n    }\r\n\r\n    onTrackAudioOutputChangedEvent = (deviceId) => {\r\n        console.log(`Track ${deviceId} audio output changed`)\r\n    }\r\n\r\n    updateLocalTrack = (deviceId, action = 'clear') => {\r\n        if (action === 'clear') {\r\n            let clearTrack = _.find(this.trackList, { deviceId: deviceId })\r\n            if (clearTrack) {\r\n                // eslint-disable-next-line default-case\r\n                switch (clearTrack.getType()) {\r\n                    case 'audio':\r\n                    if (this.micRef.current) {\r\n                        clearTrack.detach(this.micRef.current)\r\n                        clearTrack.removeEventListener(window.JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED, this.onTrackStoppedEvent);\r\n                        clearTrack.removeEventListener(window.JitsiMeetJS.events.track.TRACK_AUDIO_OUTPUT_CHANGED, this.onTrackAudioOutputChangedEvent);\r\n                        clearTrack.dispose()\r\n                    }\r\n                    break\r\n                    case 'video':\r\n                        if (this.videoRef.current) {\r\n                            clearTrack.detach(this.videoRef.current)\r\n                            clearTrack.dispose()\r\n                        }\r\n                    break\r\n                }\r\n            }\r\n        } else if (action === 'set') {\r\n            let setTrack = _.find(this.trackList, (t) => { return t.deviceId === deviceId })\r\n            if (setTrack) {\r\n            // eslint-disable-next-line default-case\r\n                switch (setTrack.getType()) {\r\n                    case 'audio':\r\n                        if (this.micRef.current) {\r\n                            setTrack.attach(this.micRef.current)\r\n                            setTrack.addEventListener(window.JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED, this.onTrackStoppedEvent);\r\n                            setTrack.addEventListener(window.JitsiMeetJS.events.track.TRACK_AUDIO_OUTPUT_CHANGED, this.onTrackAudioOutputChangedEvent);\r\n                            setTrack.unmute()\r\n                        }\r\n                    break\r\n                    case 'video':\r\n                        if (setTrack && this.videoRef.current) {\r\n                            setTrack.attach(this.videoRef.current)\r\n                        }\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate (prevProps, prevState) {\r\n        \r\n        const selectedVideoDeviceId = componentGetCompareProps('selectedVideoDeviceId', this.state, prevState, '')\r\n\r\n        if (selectedVideoDeviceId.HasChanged) {\r\n            if (selectedVideoDeviceId.Previous !== '') {\r\n                this.updateLocalTrack(selectedVideoDeviceId.Previous, 'clear')\r\n            }\r\n            if (selectedVideoDeviceId.Current !== '') {\r\n                this.updateLocalTrack(selectedVideoDeviceId.Current, 'set' )\r\n            }\r\n        }\r\n\r\n        const selectedMicDeviceId = componentGetCompareProps('selectedMicDeviceId', this.state, prevState, '')\r\n\r\n        if (selectedMicDeviceId.HasChanged) {\r\n            if (selectedMicDeviceId.Previous !== '') {\r\n                this.updateLocalTrack(selectedMicDeviceId.Previous, 'clear')\r\n            }\r\n            if (selectedMicDeviceId.Current !== '') {\r\n                this.updateLocalTrack(selectedMicDeviceId.Current, 'set' )\r\n            }\r\n        }\r\n\r\n        const activeRoomId = componentGetCompareProps('activeRoomId', this.props, prevProps, '')\r\n\r\n        if (activeRoomId.HasChanged) {\r\n            if (activeRoomId.Current && window.telimed.activeRoom) {\r\n                const { selectedMicDeviceId, selectedVideoDeviceId } = this.state\r\n                let videoTrack = _.find(this.trackList, (t) => { return t.deviceId === selectedVideoDeviceId })\r\n                let micTrack = _.find(this.trackList, (t) => { return t.deviceId === selectedMicDeviceId })   \r\n                if (videoTrack) {\r\n                    window.telimed.activeRoom.addTrack(videoTrack)\r\n                }\r\n                if (micTrack) {\r\n                    window.telimed.activeRoom.addTrack(micTrack)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount () {\r\n        const { selectedMicDeviceId, selectedVideoDeviceId } = this.state\r\n\r\n        this.updateLocalTrack(selectedMicDeviceId, 'clear')\r\n        this.updateLocalTrack(selectedVideoDeviceId, 'clear')\r\n    }\r\n\r\n    onCameraChange = (event) => {\r\n        this.setState({selectedVideoDeviceId: event.target.value});\r\n    }\r\n\r\n    onMicrophoneChange = (event) => {\r\n        this.setState({selectedMicDeviceId: event.target.value});\r\n    }\r\n\r\n    render () {\r\n        const { selectedVideoDeviceId, selectedMicDeviceId, deviceList = [] } = this.state\r\n        \r\n       \r\n        return <div class='local_track'>\r\n            <div class='local_track_controls'>\r\n                <span>Camera</span>\r\n                <select value={selectedVideoDeviceId} onChange={this.onCameraChange}>\r\n                    {_.map(_.concat([{ name: 'none', id: 'none', type: 'none' }], _.filter(deviceList, { type: 'videoinput' })), (d) => {\r\n                        return <option value={d.id}>{d.name}</option>\r\n                    })}\r\n                </select>\r\n                <span>Microphone</span>\r\n                <select value={selectedMicDeviceId} onChange={this.onMicrophoneChange}>\r\n                    {_.map(_.filter(deviceList, { type: 'audioinput' }), (d) => {\r\n                        return <option value={d.id}>{d.name}</option>\r\n                    })}\r\n                </select>\r\n            </div>\r\n            <div class='local_track_body'>\r\n                <video autoPlay='1' ref={this.videoRef}/>\r\n            </div>\r\n            <div>\r\n                <audio autoPlay='1' muted='true' ref={this.micRef} />\r\n            </div>\r\n        </div>\r\n\r\n    }\r\n}","import React from 'react'\r\nimport _ from 'lodash'\r\n\r\nexport class LocalSpeaker extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            selectedSpeakerDeviceId: '',\r\n            speakerList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        const { deviceList = [], defaultSpeakerId, onSpeakerChanged } = this.props\r\n\r\n        this.setState({\r\n            speakerList: _.filter(deviceList, { type: 'audiooutput' }),\r\n            selectedSpeakerDeviceId: defaultSpeakerId\r\n        }, () => {\r\n            if (_.isFunction(onSpeakerChanged)) {\r\n                let firstSpeaker = _.find(deviceList, { id: defaultSpeakerId })\r\n                onSpeakerChanged(firstSpeaker)\r\n            }\r\n        })\r\n    }\r\n\r\n    onSpeakerChanged = (event) => {\r\n        const { onSpeakerChanged } = this.props\r\n        const { speakerList = [] } = this.state\r\n        let newSpeakerId = event.target.value\r\n        this.setState({\r\n            selectedSpeakerDeviceId: newSpeakerId\r\n        }, () => {\r\n            if (_.isFunction(onSpeakerChanged)) {\r\n                onSpeakerChanged(_.find(speakerList, { id: newSpeakerId }) || { id: 'none', name: 'None' })\r\n            }\r\n        })\r\n    }\r\n\r\n    render () {\r\n        const { selectedSpeakerDeviceId, speakerList } = this.state\r\n        return <React.Fragment>\r\n            <span>Speaker</span>\r\n            <select value={selectedSpeakerDeviceId} onChange={this.onSpeakerChanged}>\r\n                {_.map(speakerList, (s) => <option value={s.id}>{s.name}</option>)}\r\n            </select>    \r\n        </React.Fragment>\r\n\r\n    }\r\n\r\n}","import React from 'react';\r\nimport _ from 'lodash'\r\nimport { componentGetCompareProps } from './Shared'\r\nimport './RemoteTrack.css'\r\n\r\nexport class RemoteTrack extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedVideoId: '',\r\n            selectedMicId: ''\r\n        }\r\n        this.videoRef = React.createRef()\r\n        this.micRef = React.createRef()\r\n        this.tracks = []\r\n    }\r\n\r\n    componentDidMount () {\r\n        const { trackIds = [], selectedSpeakerDeviceId } = this.props\r\n        this.tracks = _.filter(window.telimed.remoteTracks, (rt) => { return _.indexOf(trackIds, rt.id) !== -1 })\r\n\r\n        let videoTrack = _.find(this.tracks, { type: 'video' })\r\n        let micTrack = _.find(this.tracks, { type: 'audio' })\r\n\r\n        if (videoTrack || micTrack) {\r\n            let newState = {}\r\n            if (videoTrack) {\r\n                this.updateTrack(videoTrack, 'set')\r\n                newState.selectedVideoId = videoTrack.id\r\n            }\r\n            if (micTrack) {\r\n                this.updateTrack(micTrack, 'set')\r\n                newState.selectedMicId = micTrack.id\r\n                micTrack.track.setAudioOutput(selectedSpeakerDeviceId)\r\n            }\r\n            this.setState(newState)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n\r\n        const trackIds = componentGetCompareProps('trackIds', this.props, prevProps, [])\r\n        const currentTrackIdText = _.map(trackIds.Current, (ct) => { return ct.id }).join(',')\r\n        const previousTrackIdText = _.map(trackIds.Previous, (pt) => { return pt.id}).join(',')\r\n\r\n        if (currentTrackIdText !== previousTrackIdText) {\r\n            let participantId = _.first(_.map(trackIds.Current, (tid) => tid.participantId))\r\n            this.tracks = _.filter(window.telimed.remoteTracks, { participantId: participantId })\r\n            let videoTrack = _.find(this.tracks, { type: 'video' })\r\n            let micTrack = _.find(this.tracks, { type: 'audio' })\r\n            let newState = {}\r\n            if (videoTrack) {\r\n                const { selectedVideoId } = this.state\r\n                if (videoTrack.id !== selectedVideoId) {\r\n                    let oldVideoTrack = _.find(this.tracks, { id: selectedVideoId })\r\n                    if (oldVideoTrack) {\r\n                        this.updateTrack(oldVideoTrack, 'clear')\r\n                    }\r\n                    this.updateTrack(videoTrack, 'set')\r\n                    newState.selectedVideoId = videoTrack.id\r\n                }\r\n            }\r\n            if (micTrack) {\r\n                const { selectedMicId } = this.state\r\n                if (micTrack.id !== selectedMicId) {\r\n                    const { selectedSpeakerDeviceId } = this.props\r\n                    let oldMicTrack = _.find(this.tracks, { id: selectedMicId })\r\n                    if (oldMicTrack) {\r\n                        this.updateTrack(oldMicTrack, 'clear')\r\n                    }\r\n                    this.updateTrack(micTrack, 'set')\r\n                    micTrack.track.setAudioOutput(selectedSpeakerDeviceId)\r\n                    newState.selectedMicId = micTrack.id\r\n                }\r\n            }\r\n            this.setState(newState)\r\n        }\r\n\r\n        const selectedSpeakerDeviceId = componentGetCompareProps('selectedSpeakerDeviceId', this.props, prevProps, '')\r\n\r\n        if (selectedSpeakerDeviceId.HasChanged) {\r\n            const { selectedMicId } = this.state\r\n            let micTrack = _.find(this.tracks, { id: selectedMicId })\r\n            if (micTrack) {\r\n                micTrack.track.setAudioOutput(selectedSpeakerDeviceId.Current)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount () {\r\n        const { selectedVideoId, selectedMicId } = this.state\r\n        let videoTrack = _.find(this.tracks, { id: selectedVideoId })\r\n        if (videoTrack) {\r\n            try {\r\n                this.updateTrack(videoTrack, 'clear')\r\n            } catch (error) {\r\n                console.log(error.message)\r\n            }\r\n        } \r\n        let micTrack = _.find(this.tracks, { id: selectedMicId }) \r\n        if (micTrack) {\r\n            try {\r\n                this.updateTrack(micTrack, 'clear')\r\n            } catch (error) {\r\n                console.log(error.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    onTrackStoppedEvent = (event) => {\r\n        console.log(`Track Stopped`)\r\n    }\r\n\r\n    onTrackAudioOutputChangedEvent = (deviceId) => {\r\n        console.log(`Track ${deviceId} audio output changed`)\r\n    }\r\n\r\n    updateTrack = (track, action = 'clear') => {\r\n        if (action === 'clear') {\r\n            if (track) {\r\n                // eslint-disable-next-line default-case\r\n                switch (track.type) {\r\n                    case 'audio':\r\n                    if (this.micRef.current) {\r\n                        track.track.detach(this.micRef.current)\r\n                    }\r\n                    break\r\n                    case 'video':\r\n                    if (this.videoRef.current) {\r\n                        track.track.detach(this.videoRef.current)\r\n                    }\r\n                    break\r\n                }\r\n            }\r\n        } else if (action === 'set') {\r\n            if (track) {\r\n            // eslint-disable-next-line default-case\r\n                switch (track.type) {\r\n                    case 'audio':\r\n                        if (this.micRef.current) {\r\n                            track.track.attach(this.micRef.current)\r\n                        }\r\n                    break\r\n                    case 'video':\r\n                        if (this.videoRef.current) {\r\n                            track.track.attach(this.videoRef.current)\r\n                        }\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render () {\r\n        \r\n        return <div class='remote_track'>\r\n            <div class='remote_track_controls'>\r\n                <span>???</span>\r\n            </div>\r\n            <div class='remote_track_body'>\r\n                <video autoPlay='1' ref={this.videoRef}/>\r\n            </div>\r\n            <div>\r\n                <audio autoPlay='1' ref={this.micRef} />\r\n            </div>\r\n        </div>\r\n\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { LocalTracks } from './LocalTracks'\nimport { LocalSpeaker } from './LocalSpeaker'\nimport _ from 'lodash'\nimport { RemoteTrack } from './RemoteTrack';\nimport { v4 as uuidv4 } from 'uuid'\n\nexport class App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      serverURL: 'beta.meet.jit.si',\n      roomId: 'franktest',\n      selectedSpeakerDeviceId: '',\n      defaultMicId: '',\n      defaultVideoId: '',\n      defaultSpeakerId: '',\n      deviceList: [],\n      status: 'closed',\n      lastError: '',\n      remoteTrackIds: [],\n      loaded: false,\n      activeRoomId: null\n    }\n    window.telimed = {}\n    window.telimed.remoteTracks = []\n    window.telimed.activeConnection = null\n    window.telimed.activeRoom = null\n  }\n\n\n\n  componentDidMount () {\n    window.JitsiMeetJS.mediaDevices.enumerateDevices((devices) => {\n      let newDeviceList = []\n      for (let device of devices) {\n          // if (device.deviceId !== 'default' && device.deviceId !== 'communications') {\n              newDeviceList.push({ name: device.label, id: device.deviceId, type: device.kind })\n          // }\n      }\n      let micId = (_.find(newDeviceList, { type: 'audioinput' }) || {}).id || 'none'\n      let videoId = (_.find(newDeviceList, { type: 'videoinput' }) || {}).id || 'none'\n      let speakerId = (_.find(newDeviceList, { type: 'audiooutput' }) || {}).id || 'none'\n      this.setState({\n        deviceList: newDeviceList,\n        defaultMicId: micId,\n        defaultVideoId: videoId,\n        defaultSpeakerId: speakerId,\n        loaded: true\n      })\n    })\n  }\n\n  componentDidUpdate () {\n\n  }\n  \n  onSpeakerChanged = (newSpeaker) => {\n    this.setState({\n      selectedSpeakerDeviceId: newSpeaker.id\n    })\n  }\n\n  onServerChanged = (event) => {\n    this.setState({\n      serverURL: event.target.value\n    })\n  }\n\n  onRoomChanged = (event) => {\n    this.setState({\n      roomId: event.target.value\n    })\n  }\n\n  onRoomTrackAdded = (track) => {\n    if (track.isLocal() === true) {\n      return\n    }\n    let newTrackId = track.getId()\n    console.log(`Track Added: ${newTrackId}`)\n    let matchTrack = _.find(this.remoteTracks, { id: newTrackId })\n    if (matchTrack) {\n      return\n    }  \n    let trackInfo = {\n      id: newTrackId,\n      participantId: track.getParticipantId(),\n      type: track.getType(),\n      track: track\n    } \n    window.telimed.remoteTracks.push(trackInfo)\n    this.setState({\n      remoteTrackIds: _.map(window.telimed.remoteTracks, (rt) => { return { id: rt.id, participantId: rt.participantId } })\n    })\n  }\n\n  onRoomTrackRemoved = (track) => {\n    if (track.isLocal() === true) {\n      return\n    } \n    let trackId = track.getId()\n    window.telimed.remoteTracks = _.reject(window.telimed.remoteTracks, { id: trackId })\n    this.setState({\n      remoteTrackIds: _.map(window.telimed.remoteTracks, (rt) => { return { id: rt.id, participantId: rt.participantId } })\n    })\n  \n  }\n\n  onConnectionSuccess = () => {\n    const { roomId } = this.state\n    try {\n      window.telimed.activeRoom = window.telimed.activeConnection.initJitsiConference(roomId, {\n        openBridgeChannel: true\n      })\n      window.telimed.activeRoom.addEventListener(window.JitsiMeetJS.events.conference.TRACK_ADDED, this.onRoomTrackAdded)\n      window.telimed.activeRoom.addEventListener(window.JitsiMeetJS.events.conference.TRACK_REMOVED, this.onRoomTrackRemoved)\n      // this.activeRoom.on(\n      //     JitsiMeetJS.events.conference.CONFERENCE_JOINED,\n      //     onConferenceJoined);\n      //     this.activeRoom.on(JitsiMeetJS.events.conference.USER_JOINED, id => {\n      //     console.log('user join');\n      //     remoteTracks[id] = [];\n      // });\n      // this.activeRoom.on(JitsiMeetJS.events.conference.USER_LEFT, onUserLeft);\n      // this.activeRoom.on(JitsiMeetJS.events.conference.TRACK_MUTE_CHANGED, track => {\n      //     console.log(`${track.getType()} - ${track.isMuted()}`);\n      // });\n      // this.activeRoom.on(\n      //     JitsiMeetJS.events.conference.DISPLAY_NAME_CHANGED,\n      //     (userID, displayName) => console.log(`${userID} - ${displayName}`));\n      //     this.activeRoom.on(\n      //     JitsiMeetJS.events.conference.TRACK_AUDIO_LEVEL_CHANGED,\n      //     (userID, audioLevel) => console.log(`${userID} - ${audioLevel}`));\n      //     this.activeRoom.on(\n      //     JitsiMeetJS.events.conference.PHONE_NUMBER_CHANGED,\n      //     () => console.log(`${room.getPhoneNumber()} - ${room.getPhonePin()}`));\n      window.telimed.activeRoom.join()\n      this.setState({\n        status: 'open',\n        lastError: '',\n        activeRoomId: uuidv4()\n      })\n    } catch (error) {\n      this.setState({\n        status: 'closed',\n        lastError: error.message\n      })\n    }\n  }\n\n  onConnectionFailed = (a, b, c, d) => {\n    this.setState({\n      status: 'closed',\n      lastError: a,\n      activeRoomId: null\n    })\n  }\n\n  onConnectionDisconnect = () => {\n    window.telimed.activeConnection.removeEventListener(window.JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, this.onConnectionSuccess)\n    window.telimed.activeConnection.removeEventListener(window.JitsiMeetJS.events.connection.CONNECTION_FAILED, this.onConnectionFailed)\n    window.telimed.activeConnection.removeEventListener(window.JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED, this.onConnectionDisconnect)\n    window.telimed.activeRoom.removeEventListener(window.JitsiMeetJS.events.conference.TRACK_ADDED, this.onRoomTrackAdded)\n    window.telimed.activeRoom.removeEventListener(window.JitsiMeetJS.events.conference.TRACK_REMOVED, this.onRoomTrackRemoved)\n  }\n\n  onConnect = () => {\n    const { roomId, serverURL } = this.state\n    this.setState({\n      status: 'Joining...'\n    })\n    window.telimed.activeConnection = new window.JitsiMeetJS.JitsiConnection(null, null, {\n      hosts: {\n        domain: serverURL,\n        muc: `conference.${serverURL}` // FIXME: use XEP-0030\n      },\n      serviceUrl:  `wss://${serverURL}/xmpp-websocket?room=${roomId}`,\n      clientNode: `https://${serverURL}`\n    })\n\n    window.telimed.activeConnection.addEventListener(window.JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, this.onConnectionSuccess)\n    window.telimed.activeConnection.addEventListener(window.JitsiMeetJS.events.connection.CONNECTION_FAILED, this.onConnectionFailed)\n    window.telimed.activeConnection.addEventListener(window.JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED, this.onConnectionDisconnect)\n    window.telimed.activeConnection.connect()\n  }\n\n  onDisconnect = () => {\n    if (window.telimed.activeRoom) {\n      this.setState({\n        status: 'Leaving...'\n      })\n      try {  \n        window.telimed.activeRoom.leave().then(() => {\n          if (window.telimed.activeConnection) {\n            window.telimed.activeConnection.disconnect()\n          }\n          this.setState({\n            status: 'closed',\n            remoteTracks: [],\n            activeRoomId: null\n          })\n        })\n      } catch (error) {\n        this.setState({\n          status: 'closed',\n          lastError: error.message\n        })\n      }\n    }\n  }\n\n  renderRemoteTracks = (trackGroups = {}, selectedSpeakerDeviceId) => {\n    let ret = []\n\n    let participantIds = _.keys(trackGroups)\n\n    if (participantIds.length === 0) {\n      return null\n    }\n    for (let participantId of participantIds) {\n      ret.push(<div key={participantId} className=\"B_Body_Block\">\n        <RemoteTrack trackIds={trackGroups[participantId]} selectedSpeakerDeviceId={selectedSpeakerDeviceId} />\n      </div>)\n    }\n\n    return ret\n  }\n\n  render() {\n    const { selectedSpeakerDeviceId, serverURL, roomId, status, lastError, defaultMicId, defaultVideoId, defaultSpeakerId, deviceList, loaded = false, remoteTrackIds = [], activeRoomId } = this.state\n\n    if (loaded === false) {\n      return (\n        <div className='App'>\n          <div className='AppLoading'>\n            <h3>Loading...</h3>\n          </div>\n        </div>\n      )\n    }\n\n    let remoteTrackGroups = _.groupBy(remoteTrackIds, (rt) => { return rt.participantId })\n\n    return (\n      <div className=\"App\">\n        <div className=\"TL\">\n          <div>Server: <input readOnly={status !== 'closed'} type='text' onChange={(event) => { this.setState({ serverURL: event.target.value })}}  value={serverURL} /></div>\n          <div>Room: <input readOnly={status !== 'closed'} type='text' onChange={(event) => { this.setState({ roomId: event.target.value })}} value={roomId} /></div>\n          <div>\n            {status === 'closed'\n              ? <button onClick={this.onConnect}>\n                Connect\n              </button>\n              : status === 'open' \n                  ? <button onClick={this.onDisconnect}>\n                      Disconnect\n                    </button>\n                  : <button disabled={true} >\n                      {status}\n                    </button>\n            } \n          </div>\n          <div>{lastError}</div>\n        </div>\n        <div className=\"TR\">\n          <div className=\"TR_Header\">\n            <h3>Me</h3>\n            <LocalSpeaker deviceList={deviceList} key='LocalSpeaker' defaultSpeakerId={defaultSpeakerId} onSpeakerChanged={this.onSpeakerChanged} />\n          </div>\n          <div class='TR_Body'>\n            <div className=\"TR_Body_Block\">\n              <LocalTracks activeRoomId={activeRoomId} deviceList={deviceList} defaultMicId={defaultMicId} defaultVideoId={defaultVideoId} key='localTracks' />\n            </div>\n          </div>\n        </div>\n        <div className=\"B\">\n          <div className=\"B_Header\">\n            <h3>Them</h3>\n          </div>\n          <div className=\"B_Body\">\n            {this.renderRemoteTracks(remoteTrackGroups, selectedSpeakerDeviceId)}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nwindow.JitsiMeetJS.init()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}